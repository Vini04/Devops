package com.employeemanagement.controller;


// To call the service methods.
import com.employeemanagement.entity.Employee;
import com.employeemanagement.service.EmployeeService;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

// @RestController: Marks the class as a RESTful API controller.
// @RequestMapping("/api/employees"): Maps all endpoints to /api/employees.
@CrossOrigin(origins = "http://localhost:3000") 
@RestController
@RequestMapping("/api/employees")
public class EmployeeController {

    private final EmployeeService employeeService;

    public EmployeeController(EmployeeService employeeService) {
        this.employeeService = employeeService;
    }
 
// CRUD Operations
    // GET /api/employees: Returns a list of all employees.
    @GetMapping
    public List<Employee> getAllEmployees() {
        return employeeService.getAllEmployees(); // Calls service to fetch all employee records
    }
    
    // GET - Employee by ID
    @GetMapping("/{id}") // Handles GET request to /api/employees/{id}
    public ResponseEntity<Employee>  getEmployeeById(@RequestBody Employee employee) {
    	Employee savedEmployee = employeeService.saveEmployee(employee); // Fetch employee by ID from service
    	return ResponseEntity.status(HttpStatus.CREATED).body(savedEmployee); // Return the employee object with status 200 OK
    }

    // POST /api/employees: Allows adding a new employee :  Create new employee
    @PostMapping // Handles POST request to /api/employees
    public ResponseEntity<Employee> createEmployee(@RequestBody Employee employee) {
        Employee savedEmployee = employeeService.saveEmployee(employee); // Save new employee to DB via service
        return ResponseEntity.status(HttpStatus.CREATED).body(savedEmployee); // Return saved employee with 201 Created
    }
    
    // PUT - Update employee
    @PutMapping("/{id}") // Handles PUT request to /api/employees/{id}
    public ResponseEntity<Employee> updateEmployee(
            @PathVariable Long id, // ID of the employee to update
            @RequestBody Employee employeeDetails) { // New employee data from request body
        Employee updated = employeeService.updateEmployee(id, employeeDetails); // Update employee via service
        return ResponseEntity.ok(updated);
    }

    // DELETE - Delete employee
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteEmployee(@PathVariable Long id) {
        employeeService.deleteEmployee(id);
        return ResponseEntity.noContent().build();
    }
}
