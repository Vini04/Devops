package com.eventmanagement.service.impl;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.eventmanagement.entity.Event;
import com.eventmanagement.entity.RSVP;
import com.eventmanagement.entity.RSVPStatus;
import com.eventmanagement.entity.User;
import com.eventmanagement.repository.EventRepository;
import com.eventmanagement.repository.RSVPRepository;
import com.eventmanagement.repository.UserRepository;
import com.eventmanagement.service.RSVPService;

@Service
public class RSVPServiceImpl implements RSVPService{
	
	@Autowired
	private RSVPRepository rsvpRepository;

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private EventRepository eventRepository;
    
    //Saves a new RSVP to the database using the repository.
	@Override
	public RSVP createRSVP(RSVP rsvp) {
		return rsvpRepository.save(rsvp);
	}
	
	// Returns a list of all RSVP records from the database.
	@Override
    public List<RSVP> getAllRSVPs() {
        return rsvpRepository.findAll();
    }
	
	// Finds an event by its ID. If found, returns all RSVPs for that event; if not, throws an exception.
	@Override
	public List<RSVP> getRSVPsByEventId(long eventId) {
        Optional<Event> event = eventRepository.findById(eventId);
        return event.map(rsvpRepository::findByEvent).orElseThrow(() -> new RuntimeException("Event not found"));
	}

	// Finds a user by their ID. If found, returns all RSVPs made by that user; if not, throws an exception.
	@Override
	public List<RSVP> getRSVPsByuserId(long userId) {
        Optional<User> user = userRepository.findById(userId);
        return user.map(rsvpRepository::findByUser).orElseThrow(() -> new RuntimeException("User not found"));
	}

	// Finds an RSVP by its ID. If found, updates its status and saves it; if not, returns null.
	@Override
	public RSVP updateRSVP(Long id, RSVP updatedRSVP) {
        Optional<RSVP> existing = rsvpRepository.findById(id);
        if (existing.isPresent()) {
            RSVP rsvp = existing.get();
            rsvp.setStatus(updatedRSVP.getStatus());
            return rsvpRepository.save(rsvp);
        }
        return null;
	}

	@Override
	public RSVP createOrUpdateRSVP(Long userId, Long eventId, RSVPStatus status) {
		// TODO Auto-generated method stub
		return null;
	}

}
