package com.eventmanagement.service.impl;

import java.util.List;
import java.util.Map;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.eventmanagement.entity.Event;
import com.eventmanagement.entity.RSVP;
import com.eventmanagement.entity.RSVPStatus;
import com.eventmanagement.entity.User;
import com.eventmanagement.repository.EventRepository;
import com.eventmanagement.repository.RSVPRepository;
import com.eventmanagement.repository.UserRepository;
import com.eventmanagement.service.RSVPService;

@Service
public class RSVPServiceImpl implements RSVPService{
	
	@Autowired
	private RSVPRepository rsvpRepository;

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private EventRepository eventRepository;
    
    //Saves a new RSVP to the database using the repository.
	@Override
	public RSVP createRSVP(RSVP rsvp) {
		return rsvpRepository.save(rsvp);
	}
	
	// Returns a list of all RSVP records from the database.
	@Override
    public List<RSVP> getAllRSVPs() {
        return rsvpRepository.findAll();
    }
	
	// Finds an event by its ID. If found, returns all RSVPs for that event; if not, throws an exception.
	@Override
	public List<RSVP> getRSVPsByEventId(long eventId) {
        Optional<Event> event = eventRepository.findById(eventId);
        return event.map(rsvpRepository::findByEvent).orElseThrow(() -> new RuntimeException("Event not found"));
	}

	// Finds a user by their ID. If found, returns all RSVPs made by that user; if not, throws an exception.
	@Override
	public List<RSVP> getRSVPsByuserId(long userId) {
        Optional<User> user = userRepository.findById(userId);
        return user.map(rsvpRepository::findByUser).orElseThrow(() -> new RuntimeException("User not found"));
	}

	@Override
	public List<RSVP> getRSVPsByUsername(String username) {
	    User user = userRepository.findByUsername(username)
	        .orElseThrow(() -> new RuntimeException("User not found"));
	    return rsvpRepository.findByUser(user);
	}

	// Finds an RSVP by its ID. If found, updates its status and saves it; if not, returns null.
	@Override
	public RSVP updateRSVP(Long id, RSVP updatedRSVP) {
        Optional<RSVP> existing = rsvpRepository.findById(id);
        if (existing.isPresent()) {
            RSVP rsvp = existing.get();
            rsvp.setStatus(updatedRSVP.getStatus());
            return rsvpRepository.save(rsvp);
        }
        return null;
	}
	
	@Override
	public Map<String, Long> getRsvpSummary(Long eventId) {
	    List<RSVP> rsvps = rsvpRepository.findByEventId(eventId);

	    Map<String, Long> summary = new HashMap<>();
	    summary.put("yes", rsvps.stream().filter(r -> r.getStatus() == RSVPStatus.YES).count());
	    summary.put("no", rsvps.stream().filter(r -> r.getStatus() == RSVPStatus.NO).count());
	    summary.put("maybe", rsvps.stream().filter(r -> r.getStatus() == RSVPStatus.MAYBE).count());

	    return summary;
	}\

	@Override
	public RSVP createOrUpdateRSVP(String username, Long eventId, RSVPStatus status) {
		User user = userRepository.findByUsername(username)
				.orElseThrow(() -> new RuntimeException("User not found"));
	    Event event = eventRepository.findById(eventId)
	        .orElseThrow(() -> new RuntimeException("Event not found"));

	    // Check if RSVP exists
	    Optional<RSVP> existing = rsvpRepository.findByUserAndEvent(user, event);
	    RSVP rsvp;
	    if (existing.isPresent()) {
	        rsvp = existing.get();
	        rsvp.setStatus(status); // Update status
	    } else {
	        rsvp = new RSVP();
	        rsvp.setUser(user);
	        rsvp.setEvent(event);
	        rsvp.setStatus(status);
	    }
	    return rsvpRepository.save(rsvp);
	}

}
