// For Spring Security 6+
// Configure which endpoints are public (like /api/auth/**) and which need authentication.
// Disables CSRF (needed for testing APIs from frontend).
// Allows all incoming requests without login/auth.

package com.eventmanagement.config;

import com.eventmanagement.security.jwt.JwtAuthFilter; // Import your JWT filter
import com.eventmanagement.security.services.CustomUserDetailsService; // Import your custom UserDetailsService

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.AuthenticationProvider;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;

@EnableMethodSecurity // to enable method-level security
@Configuration
public class SecurityConfig {
	
	// Register the JWT Filter in SecurityConfig
	@Autowired
	 private JwtAuthFilter jwtAuthFilter;

    @Autowired
    private CustomUserDetailsService customUserDetailsService;


    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http
            .cors(cors -> cors.configurationSource(corsConfigurationSource()))
            .csrf(csrf -> csrf.disable())
            .authorizeHttpRequests(auth -> auth
                // Public auth endpoints
                .requestMatchers("/api/auth/**").permitAll()

                // Events for both Admin & Attendee
                .requestMatchers("/api/events/**").hasAnyRole("ADMIN", "ATTENDEE")

                // ✅ Attendee-specific RSVPs
                .requestMatchers("/api/rsvps/my-rsvps/**").hasRole("ATTENDEE")
                .requestMatchers(HttpMethod.GET, "/api/rsvps/user").hasRole("ATTENDEE")  // View own RSVPs
                .requestMatchers(HttpMethod.POST, "/api/rsvps").hasRole("ATTENDEE")      // Create RSVP

                // ✅ Admin-specific RSVP management
                .requestMatchers(HttpMethod.GET, "/api/rsvps/user/**").hasRole("ADMIN")  // View RSVPs by user
                .requestMatchers("/api/rsvps/event/**").hasRole("ADMIN")                 // Event RSVP counts
                .requestMatchers(HttpMethod.GET, "/api/rsvps").hasRole("ADMIN")          // All RSVPs

                // Any other request requires authentication
                .anyRequest().authenticated()
            )
            .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
            .authenticationProvider(authenticationProvider())
            .addFilterBefore(jwtAuthFilter, UsernamePasswordAuthenticationFilter.class);

        return http.build();
    }


    
    @Bean
    public CorsConfigurationSource corsConfigurationSource() {
        CorsConfiguration config = new CorsConfiguration();
        config.setAllowedOrigins(List.of("http://localhost:3000")); // ✅ React origin
        config.setAllowedMethods(List.of("GET", "POST", "PUT", "DELETE", "OPTIONS"));
        config.setAllowedHeaders(List.of("*"));
        config.setAllowCredentials(true); // Only if you use cookies
        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        source.registerCorsConfiguration("/**", config);
        return source;
    }
    
	// Provides authentication logic using your custom UserDetailsService
    @Bean
    public AuthenticationProvider authenticationProvider() {
        DaoAuthenticationProvider provider =  new DaoAuthenticationProvider();
        provider.setUserDetailsService(customUserDetailsService); // use your custom logic to fetch user from DB
        provider.setPasswordEncoder(passwordEncoder());
        return provider;
    }
    
    // For userServiceImpl
    // Bean to encrypt passwords using BCrypt
    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }
    
    // For signin request(AuthenticationManager)
    @Bean
    public AuthenticationManager authenticationManager(AuthenticationConfiguration authConfig) throws Exception {
    	return authConfig.getAuthenticationManager();
    }
}

// Requires JWT token on /api/events calls

// Reads user identity from JWTAuthFilter

// Rejects unauthenticated requests