package com.eventmanagement.controller;

import java.security.Principal;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestAttribute;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;

import com.eventmanagement.entity.Event;
import com.eventmanagement.entity.RSVP;
import com.eventmanagement.entity.RSVPStatus;
import com.eventmanagement.entity.User;
import com.eventmanagement.payload.RSVPRequest;
import com.eventmanagement.payload.RSVPResponse;
import com.eventmanagement.repository.RSVPRepository;
import com.eventmanagement.repository.UserRepository;
import com.eventmanagement.service.RSVPService;

@RestController
@RequestMapping("/api/rsvps")
public class RSVPController {

    @Autowired
    private RSVPService rsvpService;
    
    @Autowired
    private UserRepository userRepository;

    @Autowired
    private RSVPRepository rsvpRepository;
    
    // Create a new RSVP
    @PostMapping
    // Attendee can submit or update RSVP
    @PreAuthorize("hasRole('ATTENDEE')")  // or hasAnyRole('ADMIN', 'ATTENDEE') if both can RSVP
    // To extract the user from the JWT and pass only eventId and status from the frontend
    public ResponseEntity<?> createRSVP(@RequestBody RSVPRequest rsvpRequest) {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        String username = authentication.getName();
        // Now fetch the User entity by username
        RSVP created = rsvpService.createOrUpdateRSVP(username, rsvpRequest.getEventId(), rsvpRequest.getStatus());
        return ResponseEntity.ok(created);
    }
    
    // Get RSVPs by eventId
    // Admin can view all RSVPs for an event
    @GetMapping("/event/{eventId}")
    @PreAuthorize("hasRole('ADMIN')") // or admin only (to see events)
    public ResponseEntity<List<RSVPResponse>> getByEvent(@PathVariable Long eventId) {
        List<RSVP> rsvps = rsvpService.getRSVPsByEventId(eventId);
        List<RSVPResponse> responses = rsvps.stream().map(rsvp -> {
            RSVPResponse dto = new RSVPResponse();
            dto.setId(rsvp.getId());
            dto.setStatus(rsvp.getStatus().toString());
            dto.setEventId(rsvp.getEvent().getId());
            dto.setUserId(rsvp.getUser().getId());
            return dto;
        }).toList();
        return ResponseEntity.ok(responses);
    }
    
    // FOR RSVPSummary
    @GetMapping("/summary/{eventId}")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<Map<String, Long>> getRsvpSummaryByEvent(@PathVariable Long eventId) {
        Map<String, Long> summary = rsvpService.getRsvpSummary(eventId);
        return ResponseEntity.ok(summary);
    }
    
    // Get RSVPs by userId
    // Admin can view RSVPs by any user
    @GetMapping("/user/{userId}") // or admin only (to see any user's RSVPs)
    @PreAuthorize("hasRole('ADMIN')") 
    public ResponseEntity<List<RSVPResponse>> getByUser(@PathVariable Long userId) {
    	List<RSVP> rsvps = rsvpService.getRSVPsByuserId(userId);
        List<RSVPResponse> responses = rsvps.stream().map(rsvp -> {
            RSVPResponse dto = new RSVPResponse();
            dto.setId(rsvp.getId());
            dto.setStatus(rsvp.getStatus().toString());
            dto.setEventId(rsvp.getEvent().getId());
            dto.setUserId(rsvp.getUser().getId());
            return dto;
        }).toList();
        return ResponseEntity.ok(responses);
    }
    
    // Get RSVPs for the currently logged-in user
    // Attendee can view their own RSVPs
    @GetMapping("/user") // for the logged-in user (attendee or admin)
    @PreAuthorize("hasRole('ATTENDEE')")
    public ResponseEntity<List<RSVPResponse>> getMyRsvps() {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        String username = authentication.getName();
        List<RSVP> rsvps = rsvpService.getRSVPsByUsername(username);
        List<RSVPResponse> responses = rsvps.stream().map(rsvp -> {
            RSVPResponse dto = new RSVPResponse();
            dto.setId(rsvp.getId());
            dto.setStatus(rsvp.getStatus().toString());
            dto.setEventId(rsvp.getEvent().getId());
            dto.setUserId(rsvp.getUser().getId());
            return dto;
        }).toList();
        return ResponseEntity.ok(responses);
    }
    
    @GetMapping("/my-rsvps/{status}")
    @PreAuthorize("hasRole('ATTENDEE')")
    public ResponseEntity<List<Event>> getEventsByRSVPStatus(
    		@PathVariable RSVPStatus status,
    		Principal principal) {
    	
        // 1. Get current user from username in token
        User user = userRepository.findByUsername(principal.getName())
                .orElseThrow(() -> new RuntimeException("User not found"));

        // 2. Find all RSVPs by user and status
        List<RSVP> rsvps = rsvpRepository.findByUserAndStatus(user, status);

        // 3. Extract events from RSVPs
        List<Event> events = rsvps.stream()
                .map(RSVP::getEvent)
                .collect(Collectors.toList());

        return ResponseEntity.ok(events);
    }
    
    // (Optional) Admin can fetch all RSVPs
    @GetMapping
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<List<RSVPResponse>> getAllRsvps() {
        List<RSVP> rsvps = rsvpService.getAllRSVPs();
        List<RSVPResponse> responses = rsvps.stream()
            .filter(rsvp -> rsvp.getEvent() != null && rsvp.getUser() != null) // âœ… Filter out nulls
            .map(rsvp -> {
                RSVPResponse dto = new RSVPResponse();
                dto.setId(rsvp.getId());
                dto.setStatus(rsvp.getStatus().toString());
                dto.setEventId(rsvp.getEvent().getId());
                dto.setUserId(rsvp.getUser().getId());
                return dto;
            })
            .toList();
        return ResponseEntity.ok(responses);
    }

    
    // Update RSVP status by RSVP ID (optional, restrict as needed)
    @PutMapping("/{id}")
    public ResponseEntity<RSVP> updateRSVP(@PathVariable Long id, @RequestBody RSVP rsvp) {
        RSVP updated = rsvpService.updateRSVP(id, rsvp);
        if (updated != null) {
            return ResponseEntity.ok(updated);
        } else {
            return ResponseEntity.notFound().build();
        }
    }

}
